#!/usr/bin/env python
# coding: utf-8

# In[6]:


import numpy as np
from auxiliary_functions_and_classes import exact_solution

# Используемые матрицы сгенерированы с помощью generator_of_poorly_conditioned_matrices 
# из файла auxiliary_functions_and_classes.py


# __________________Точное решение плохо обусловленной матрицы для N = 6_________________________________________
# _______________________________A * X = B_______________________________________________________________________

A_6 = np.array([[1.0087, 0.9557, 0.9849, 1.069, 0.9009, 0.9243], [1.0341, 1.0652, 0.9273, 1.015, 1.0783, 0.9418],
    [0.9371, 0.9217, 0.9439, 1.0957, 1.0623, 0.9344], [1.0632, 0.9548, 0.9863, 1.088, 1.0635, 0.9672],
    [0.9351, 0.9746, 0.9011, 0.9505, 1.0591, 0.9031], [1.0198, 1.0208, 0.921, 0.9764, 0.9073, 1.0781]])

B_6 = np.array([20.2011, 21.0487, 20.9129, 21.4044, 20.1037, 20.7351])

the_exact_solution_6 = exact_solution(A_6, B_6) 
# [1. 2. 3. 4. 5. 6.]




# __________________Точное решение плохо обусловленной матрицы для N = 10_________________________________________
# _______________________________A * X = B_______________________________________________________________________

A_10 = np.array([[1.0, 0.98989898989899, 0.9797979797979798, 0.9696969696969697, 0.9595959595959596, 
              0.9494949494949495, 0.9393939393939394, 0.9292929292929293, 0.9191919191919192, 0.9090909090909091], 
             [0.9090909090909091, 1.0, 0.98989898989899, 0.9797979797979798, 0.9696969696969697, 0.9595959595959596, 
              0.9494949494949495, 0.9393939393939394, 0.9292929292929293, 0.9191919191919192], [0.9191919191919192, 
              0.9090909090909091, 1.0, 0.98989898989899, 0.9797979797979798, 0.9696969696969697, 0.9595959595959596, 
              0.9494949494949495, 0.9393939393939394, 0.9292929292929293], [0.9292929292929293, 0.9191919191919192, 
              0.9090909090909091, 1.0, 0.98989898989899, 0.9797979797979798, 0.9696969696969697, 0.9595959595959596, 
              0.9494949494949495, 0.9393939393939394], [0.9393939393939394, 0.9292929292929293, 0.9191919191919192, 
              0.9090909090909091, 1.0, 0.98989898989899, 0.9797979797979798, 0.9696969696969697, 0.9595959595959596, 
              0.9494949494949495], [0.9494949494949495, 0.9393939393939394, 0.9292929292929293, 0.9191919191919192, 
              0.9090909090909091, 1.0, 0.98989898989899, 0.9797979797979798, 0.9696969696969697, 0.9595959595959596], 
             [0.9595959595959596, 0.9494949494949495, 0.9393939393939394, 0.9292929292929293, 0.9191919191919192, 
              0.9090909090909091, 1.0, 0.98989898989899, 0.9797979797979798, 0.9696969696969697], [0.9696969696969697, 
              0.9595959595959596, 0.9494949494949495, 0.9393939393939394, 0.9292929292929293, 0.9191919191919192, 
              0.9090909090909091, 1.0, 0.98989898989899, 0.9797979797979798], [0.9797979797979798, 0.9696969696969697, 
              0.9595959595959596, 0.9494949494949495, 0.9393939393939394, 0.9292929292929293, 0.9191919191919192, 
              0.9090909090909091, 1.0, 0.98989898989899], [0.98989898989899, 0.9797979797979798, 0.9696969696969697, 
              0.9595959595959596, 0.9494949494949495, 0.9393939393939394, 0.9292929292929293, 0.9191919191919192, 
              0.9090909090909091, 1.0]])

B_10 = np.array([51.66666667, 52.12121212, 52.47474747, 52.72727273, 52.87878788, 52.92929293,
                 52.87878788, 52.72727273, 52.47474747, 52.12121212])

the_exact_solution_10 = exact_solution(A_10, B_10) 
# [1.00000004 2.00000004 2.99999993 4.00000002 5.         
# 5.999999996.99999999 8.00000007 8.99999997 9.99999996]




# __________________Точное решение плохо обусловленной матрицы для N = 15_________________________________________
# _______________________________A * X = B_______________________________________________________________________

A_15 = np.array([[1.0, 0.984375, 0.96875, 0.953125, 0.9375, 0.921875, 0.90625, 0.890625, 0.875, 0.859375, 0.84375, 
              0.828125, 0.8125, 0.796875, 0.78125], [0.78125, 1.0, 0.984375, 0.96875, 0.953125, 0.9375, 0.921875, 
              0.90625, 0.890625, 0.875, 0.859375, 0.84375, 0.828125, 0.8125, 0.796875], [0.796875, 0.78125, 1.0, 
              0.984375, 0.96875, 0.953125, 0.9375, 0.921875, 0.90625, 0.890625, 0.875, 0.859375, 0.84375, 0.828125, 0.8125], 
             [0.8125, 0.796875, 0.78125, 1.0, 0.984375, 0.96875, 0.953125, 0.9375, 0.921875, 0.90625, 0.890625, 0.875, 
              0.859375, 0.84375, 0.828125], [0.828125, 0.8125, 0.796875, 0.78125, 1.0, 0.984375, 0.96875, 0.953125, 0.9375, 
              0.921875, 0.90625, 0.890625, 0.875, 0.859375, 0.84375], [0.84375, 0.828125, 0.8125, 0.796875, 0.78125, 1.0, 
              0.984375, 0.96875, 0.953125, 0.9375, 0.921875, 0.90625, 0.890625, 0.875, 0.859375], [0.859375, 0.84375, 
              0.828125, 0.8125, 0.796875, 0.78125, 1.0, 0.984375, 0.96875, 0.953125, 0.9375, 0.921875, 0.90625, 
              0.890625, 0.875], [0.875, 0.859375, 0.84375, 0.828125, 0.8125, 0.796875, 0.78125, 1.0, 0.984375, 0.96875, 
              0.953125, 0.9375, 0.921875, 0.90625, 0.890625], [0.890625, 0.875, 0.859375, 0.84375, 0.828125, 0.8125, 
              0.796875, 0.78125, 1.0, 0.984375, 0.96875, 0.953125, 0.9375, 0.921875, 0.90625], [0.90625, 0.890625, 0.875, 
              0.859375, 0.84375, 0.828125, 0.8125, 0.796875, 0.78125, 1.0, 0.984375, 0.96875, 0.953125, 0.9375, 0.921875], 
             [0.921875, 0.90625, 0.890625, 0.875, 0.859375, 0.84375, 0.828125, 0.8125, 0.796875, 0.78125, 1.0, 0.984375, 
              0.96875, 0.953125, 0.9375], [0.9375, 0.921875, 0.90625, 0.890625, 0.875, 0.859375, 0.84375, 0.828125, 0.8125, 
              0.796875, 0.78125, 1.0, 0.984375, 0.96875, 0.953125], [0.953125, 0.9375, 0.921875, 0.90625, 0.890625, 0.875, 
              0.859375, 0.84375, 0.828125, 0.8125, 0.796875, 0.78125, 1.0, 0.984375, 0.96875], [0.96875, 0.953125, 0.9375, 
              0.921875, 0.90625, 0.890625, 0.875, 0.859375, 0.84375, 0.828125, 0.8125, 0.796875, 0.78125, 1.0, 0.984375], 
             [0.984375, 0.96875, 0.953125, 0.9375, 0.921875, 0.90625, 0.890625, 0.875, 0.859375, 0.84375, 0.828125, 0.8125, 
              0.796875, 0.78125, 1.0]])

B_15 = np.array([20.2011, 21.0487, 20.9129, 21.4044, 20.1037, 20.7351, 20.567, 20.457, 21.384, 20.985, 
             21.0467, 20.3129, 21.9044, 21.1037, 20.1351])

the_exact_solution_15 = exact_solution(A_15, B_15)
# [-2.05796204  2.13787796 -0.53860204  7.10811796 -1.13550871  2.27569129
# 2.02779796 -2.39673538  3.26086462  1.29521129  4.68934462 -5.23193538
# 4.97478462  5.69115796  1.27686462]

